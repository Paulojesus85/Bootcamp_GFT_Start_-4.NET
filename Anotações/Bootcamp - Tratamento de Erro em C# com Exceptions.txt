Curso - Tratamento de Erro em C# com Exceptions



Capítulo 1 - Conceitos e importância do tratamento de exceções


* O que é uma exceção?
★ Qualquer condição de erro ou comportamento inesperado por um programa em execução. O usuário tenta acessar algo e dá um erro. Para o usuário é um erro que ele nem entende o pq, mas para o programador isso é uma exceção não tratada. 
○ falha de codificação (falha do programador na codificação)
○ falta de recursos disponíveis (pode ser uma falha de hardware/memória)
○ condições inesperadas pelo runtime (as vezes o runtime se depara com um contexto que ele não sabe como lidar.

★ Tipos de erros possíveis
→ Erros de sintaxe
→ Erros em tempo de execução
→ Erros lógicos

Erro lógico
★ Exceção provocada por falha lógica do desenvolvedor.
★ Deve ser tratado a partir da correção do código falho.

Erros de tempo de execução
★ Erros em tempo de execução que não estão necessariamente relacionados à código mal escrito. O código pode estar bem escrito e ainda dar erro.
→ comum em caso de leitura/escrita de arquivos. Por exemplo: o desenvolver acha que existe determinado arquivo, mas ele não existe. Ou, o arquivo existe mas está corrompido. 

Falha de sistema
★ Erro de tempo de execução que não pode ser tratado programaticamente de maneira significativa.
→ falta de recursos (as vezes a aplicação não tem memória para lidar com a chamada do método e o runtime não vai saber lidar com isso).


Importância do tratamento de erros

Por que devemos tratar os erros?
★ Evitar parada súbita do sistema: O desenvolvedor tem que estar pensando que o usuário vai estar usando o sistema e vai ocorrer uma condição inesperada e não pode ocorrer do sistema parar subitamente ou se fechar. O usuário  não vai saber ligar com isso.
★ Mensagens amigáveis para usuário final: O usuário não entende do sistema. Ele só quer que apareça uma msg amigável para ele resolver o problema.
★ Melhor comunicação com desenvolvedores para tratar rapidamente o problema: Se existir uma mensagem/comunicação amigável vai ser mais fácil para outro desenvolvedor resolver o problema. 


* No .NET 6 não precisa mais colocar static void Main() para rodar a aplicação



Capítulo 2 - Entendendo a classe System.Exception



Capítulo 2 - Aula 1 - Hierarquia de classes exception


Objetivos
1. Entender a hierarquia de classe de exceções a partir da classe base System.Exception e exceções mais comuns
2. Conhecer propriedades e métodos úteis que são herdados pela própria classe exception.
3. Aprender instruções associadas ao tratamento de Exceções: comandos necessários para que a gente possa capturar e tratar a exceção.

* A primeira classe mãe de todas é a Object. A classe Exception é a segunda grande classe e herda da Object. 

* A classe Exception tinha dois ramos, um o SystemException e o outro a ApplicationException. Mas a ApplicationException são se usa mais, por isso só o SystemException tem novos ramos. 

A classe Exception:

➔ Toda exceção em .NET herda da classe System.Exception
➔ Algumas exceções comun:
	IndexOutOfRangeException 
	DivideByZeroException
	NullReferenceException 
	FileNotFoundException
	InvalidOperationException 
	StackOverflowException
	ArgumentException 
	OutOfMemoryException
	ArgumentOutOfRangeException 
	KeyNotFoundException

* Mais informações sobre essas exception você encontra no site da Microsoft (https://docs.microsoft.com/pt-br/dotnet/api/system.exception?view=net-6.0)



Capítulo 2 - Aula 2 - Propriedades e métodos úteis da classe Exception


A classe Exception: Propriedades
➔ Propriedades importantes herdadas:
◆ Message: descrição legível para humanos com a causa da exceção
◆ InnerException: obtém conjunto de exceções superiores ou exceção que levou à exceção atual. Nem sempre a exceção que foi lançada é a exceção que causou o problema, pode ter sido uma exceção superior a ela.
◆ StackTrace: rastreamento do caminho até chegar ao erro. O que aconteceu no fluxo para chegar no erro.
◆ Source: relacionada à aplicação ou objeto que causou o erro: 
◆ TargetSite: relacionada ao método que lançou a exceção atual

* Todas essas propriedades são importantes para entender a causa do erro.

A classe Exception: métodos

* GetBaseException();: Dada uma cadeia de exceções (supondo que exista uma exceção lançada, mas que não é a causa raiz do problema), somente uma delas pode ser a causa raiz para todas as outras, portanto é a ‘exceção base’.
* GetObjectData();: Configuração de informações relacionadas à exceção lançada. Esse método está relacionado a transmissão de dados. Ele tem dois parâmetros:

◆ info: guarda objeto de dados serializados
◆ context: contém informação de contexto sobre origem ou destino dos dados a serem transmitidos

* GetType ();: Retorna tipo da instância atual em tempo de execução.
* ToString();: Retorna representação da atual exceção em forma de string para que a gente possa fazer algum tipo de formatação da exceção.



Capítulo 2 - Aula 3 - Comandos para lançar e tratar exceções


Lidando com exceções

★ Comando try
Provê mecanismo para capturar exceções que ocorrem durante a execução de certo bloco de código. O desenvolvedor não vai dar try em tudo. Ele vai saber que parte do código que tem uma alta probabilidade de dar problema/exceção.

★ Comando catch
Após a captura, o sistema procura pelo comando catch mais próximo que pode lidar com a exceção. É possível utilizar mais de um bloco cath. Isso pq a gente consegue tratar das exceções mais genéricas até as mais específicas. A ordem para se colocar os blocos catch são os mais especificos para os mais genericos. 

★ Comando finally
Bloco útil para liberação de recursos, pois sempre é executado, independente da captura e tratamento da exceção.

★ Comando throw
Lança uma exceção em código explicitamente. Para utilizar é só usar o throw new seguido da instância da exceção a ser lançada. Utilizar o comando em um contexto de exceção já capturada, faz o “relançamento” da exceção dentro do catch, provendo assim mais informação para depuração. Utilizar o throw dentro de um bloco catch vai fazer esse relançamento pra gente conseguir ter uma melhor rastreabilidade do erro. É possível que a exceção tenha ocorrido externamente a nossa aplicação e a gente não vai ter informações úteis para que a gente possa tratar no código.  Então a gente faz a repropagação desse erro e pega essas informações. Para isso bastar utilizar o comando throw dentro do bloco catch.

★ Comando when
Trata exceções de acordo com requerimentos específicos que você define para dada exceção.
➔ Útil quando uma exceção pode ser tratada igualmente para múltiplos erros sob determinadas condições. Primeiro o sistema vai testar a condição when, se não for satisfeita ele passa para o fluxo do catch, senão ele passa adiante. 



Capítulo 3 - Customizando Exceções


* Objetivos
Compreender a motivação e como implementar classes customizadas a partir de exemplo prático

Customizando exceções
★ Apesar da hierarquia de classes existentes com base na classe Exception, é possível criar sua própria classe de exceção de acordo com a necessidade.
★ Motivações (Por que a gente criaria novas exceptions se já existem várias):
○ Quando uma exceção reflete um erro específico que não foi mapeado por uma classe de exceção existente 
○ Quando a exceção necessita de um tratamento diferenciado
* Normalmente as exceções existentes são suficientes para a maiorira dos casos.

Criando exceções customizadas
★ Procedimento:
1. Definir uma classe que herda de Exception (vai herdar construtores e métodos específicos da classe Exception)
2. Definir construtores da classe (lembrando que ela já vai herdar construtores da classe Exception, mas a gente pode definir outros construtores úteis para a nossa propria classe)
3. Se necessário, sobrescreva membros cujo comportamento queira modificar 
4. Definir se a exceção será serializável (se ela será transmitida para uma outra aplicação, é interessante usar um construtor específico para a serialização e definir que essa exceção vai ser serializada a partir de um atributo).



Capítulo 4 - Boas práticas no tratamento de exceções


*Objetivos
Aprender boas práticas no tratamento de exceções.

Melhores práticas para exceções
1. Use try/catch/finally em trechos de códigos que podem potencialmente gerar exceções e que de fato seu próprio código também consegue tratar. Não sair colocando try/catch/finally em todas as partes do código. 
2. Nos blocos catch, sempre ordene os tratamentos das exceções das classes mais específicas para mais genéricas. (Não é apenas uma dica, mas uma obrigação.)
3. Faça limpeza automática de recursos alocados com using. Caso o objeto não implemente IDisposable utilize finally.
4. Caso exista uma condição com grandes chances de erro, verifique a viabilidade de checar a condição antes de somente tratar a exceção.
5. Projete classes de forma que as exceções sejam evitadas ou minimizadas.
6. Lance exceções ao invés de somente retornar um status code. Status code não é muito útil para a gente entender o estado ou ter uma boa rastreabilidade do problema. 
7. Somente crie novas classes de exceções, caso as pré-definidas não satisfaçam as necessidades do código.
8. Crie classes com a terminação Exception e derivadas diretamente da classe base Exception.
9. Utilize no mínimo os construtores já definidos na classe base.
10. Escreva mensagens de erros claras e sucintas.
11. É uma boa prática incluir strings traduzidas de acordo com a linguagem do usuário da aplicação através de sattelites assemblies (esses arquivos são bem úteis porque as vezes a gente quer passar alguma informação ou rastrealididade de uma exceção para alguém que fala outra língua).
12. Em exceções customizadas forneça propriedades adicionais conforme necessidade. Só crie propriedades que sejam úteis para o tratamento da exceção.
13. Utilize o comando throw para que o stack trace seja mais útil, pois o rastreio começa a partir do lançamento até a captura da exceção.
14. Utilize métodos construtores de exceções (em vez de instanciar direto no no código, ele vai retornar uma instância daquela exceção).
15. Restaure o estado da aplicação caso os métodos completem sua execução devido à exceções.



Capítulo 5 - Testes de unidade para exceções



Capítulo 5 - Aula 1 - Revisando testes de unidade


Objetivos
1. Revisar o conceito e implementação de testes de unidade
2. Aprender a implementar testes de unidade para lançamento de exceções com MSTest V2, Xunit e NUnit.

O que são testes unitários?
São testes que fazem verificação de unidades/componentes da aplicação, comparando a um retorno esperado com o retorno atual do código testado. Assim que ele verifica se algo está correto ou não. Os testes unitários estão na base da pirâmide de testes. Elas possuem o menor custo e são bem mais rápidas de implementar. Os testes de unidade são isolados, pois quando a gente testa parte de um código a gente isola ele do resto da aplicação. 

Estruturando um teste unitário
★ Padrão AAA
○ Arrange - configuração, contextualização, condições iniciais.
○ Act - chamar o sistema/classe que a gente está testando e que foi instanciada na configuração (Arrange) 
○ Assert - Asserção a respeito desse código. Resultado esperado / Resultado obtido. 

* É importante nomear bem os métodos. Dividir em três partes: 1 - A unidade que está sendo testada. 2 - contextualização que a gente vai estar configurando. 3 - O que a gente espera do teste. Exemplo: public void Somar_ValoresPositivos_RetornarPositivo(){



Capítulo 5 - Aula 2 - Testando exceções


Como testar exceções?
★ O padrão e estruturação de testes não se modifica, contudo, o mecanismo de chamada da exceção pode variar de acordo com o framework utilizado.
○ MSTest V2
○ XUnit
○ NUnit

Usando MSTest V2

* Cada método de teste tem que ter um atributo em cima chamado [TestMethod]. A classe também vai ter um atributo para poder identificar. 

* Vamos ter as três partes: Arrange, Asct, Assert

Usando XUnit

* Vai usar o [Fact] acima do método de teste. 

* Vai ter as três partes: Arrange, Act, Assert.

Usando Nunit

* Vai ter o atributo [Test] acima do código.

* Permite mais de uma forma de teste.

Sugestão de projeto prático para uso de testes com exceções
1. Projeto Calculadora via console:
○ Mínimo 4 operações
○ Utilizar boas práticas para tratamento de exceções
○ Criar projeto de teste de unidade para testar fluxos de sucesso e exceções.

* No site da Microsoft tem vários documentos sobre Exceptions. 